dictionary

data structure

- stores key-value-pairs (key: val)
    - keys must be unique & immutable: number, string, tuple, bool
        - may not be: list, dict, set
    - vals may be of any type, including nested data structures
- since Python 3.7, order is guaranteed to be according to insertion
- creation
    (1) literal with curly braces and key-value-pairs
    (2) constructor dict()
        - single arg: iterable with elems as iterable of length 2
        - one or more args: each as 'key=val'
            - key must be valid binding
- methods/operations
    (3) add/update: dict[key] = val
    (4) retrieve
        - dict[key] returns val for given key
            - if not present, raises KeyError
        - get(key, default) returns val for given key if key is present, else default
            - 2nd arg: optional
    (5) remove
        - del dict[key] removes key-value-pair for given key
            - if not present, raises KeyError
        - pop(key, default) removes pair and returns val if key is present, else default
            - 2nd arg: optional
    (6) in-operator checks whether dict contains key/val
    (7) iterables
        - items() returns list of key-val-pairs
        - keys() returns list of keys
            - alternatively, looping over dict itself returns its keys        
        - values() returns list of vals

- SEE ALSO
    - /exercism/python/inventory-management
    - /exercism/python/say

EXAMPLE
(1)
res = {1: 'apple', 2: 'berry'}              # {1: 'apple', 2: 'berry'}
(2)
res = dict([(1, 'apple'), (2, 'berry')])    # {1: 'apple', 2: 'berry'}
res = dict(one="apple", two="berry")        # {'one': 'apple', 'two': 'berry'}
(3)
res[3] = "cherry"                           # {1: 'apple', 2: 'berry', 3: 'cherry'}
(4)
# val = res[0]                              # KeyError
val = res.get(2, "apple")                   # berry
(5)
del [res[3]]                                # {1: 'apple', 2: 'berry'}
val = res.pop(3, "apple")                   # apple
(6)
print(1 in res)                             # True
print("apple" in res.values())              # True
(7)
res = {1: 'apple', 2: 'berry'}
for item in res.items():
    print(item, end=" ")                    # (1, 'apple') (2, 'berry')
for key in res.keys():
    print(key, end=" ")                     # 1 2
for key in res:
    print(key, res[key], end=" ")           # 1 apple 2 berry
for val in res.values():
    print(val, end=" ")                     # apple berry

res = {}
for word in "She loves you yeah yeah yeah".split():
    if word in res:
        res[word] += 1
    else:
        res[word] = 1
print(res)                                  # {'She': 1, 'loves': 1, 'you': 1, 'yeah': 3}
