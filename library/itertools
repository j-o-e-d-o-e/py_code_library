itertools

built-in module

for creating/using iterators
    (1) islice(iterable, start, stop[, step])
        - returns iterator whose next() method returns selected values from an iterable
        - if start given, will skip all preceding elements
            - otherwise, defaults to zero
        - if step given, determines how many vals are skipped between successive calls
            - otherwise, defaults to 1
        -  works like a slice() on a list but returns an iterator
    (2) permutations(iterable, len)
        - returns successive permutations of elems in the iterable
        - if len is specified, determines length of each permutation result
            - otherise, defaults to length of iterable

EXAMPLE
import itertools as iter

text = "joe doe"
slice = list(iter.islice(text, 2, 8))
print(slice)  # ['e', ' ', 'd', 'o', 'e']

ls = list(iter.permutations(["r", "e", "d"], 2))
print(ls)  # [('r', 'e'), ('r', 'd'), ('e', 'r'), ('e', 'd'), ('d', 'r'), ('d', 'e')]
