generator



- func containing 'yield'
- remembers last executed 'yield' and starts thereafter for next iterator-call
- next(generator)/generator.__next__() returns next item    

EXAMPLE
(1)
def primes():
    cache = []
    n = 2
    while True:
        if all(n % p != 0 for p in cache):
            cache.append(n)
            yield n
        n += 1

generator = primes()
next(generator)
generator.__next__()
print(next(generator))  # 3rd prime: 5

(2)
def permute(ls):
    if len(ls) == 0:
        yield []
    else:
        for index in range(len(ls)):
            for sublist in permute(ls[:index] + ls[index + 1:]):
                yield [ls[index]] + sublist

generator = permute("red")
print(generator.__next__())             # ['r', 'e', 'd']
print(next(generator))                  # ['r', 'd', 'e']

for res in generator:
    print("".join(res) + ", ", end="")  # erd, edr, dre, der,
