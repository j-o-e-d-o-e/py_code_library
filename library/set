set

data structure

- unordered, unindexed iterable containing unique elems
    - do not support slicing nor sorting
    - frozenset is additionally immutable, i.e. add()/remove() not available
- set-operators
    - -, -=, ^, ^=, &,&=, |, |=, <=, >=
    - only applicable if all operands are sets
        - if not, use corresponding methods (see below)
(1) creation
    - literal with curly braces
        - only immutable data types, otherwise raises TypeError
    - construtor set()
        - single arg: iterable (optional)
            - if not given, empty set
(2) methods
    - elementwise (2.1)
        - add(val) adds val
        - discard(val) removes val
            - if not in set, does nothing
        - remove(val) removes val
            - if not in set, raises KeyError
    - iterables (2.2)
        - difference(iterables) returns new set containing elems that are in invoked set but not in args
            - one or more arg(s): iterables
            - equivalent: operator '-'
            - difference_update(iterable) removes all elems of another set from this set (in-place)
        - symmetric_difference(iterable) returns new set with elems that are in invoked set or given iterable, but not in both
            - equivalent: opreator '^'
            - for more args: seemingly odd behaviour
        - intersection(iterables) returns new set containing common elems
            - equivalent: operator '&'
            - intersection_update(iterable) modifies invoked set in-place
        - union(iterables) returns new set containing elems that are in either iterables
            - equivalent: operator '|'
            - update(iterables) modifies invoked set in-place according to union()
    - checks
        - isdisjoint(iterable) returns True if two iterables have null intersection
        - issubset(iterable) returns True if given iterable contains this set
            - equivalent: operator '<='
        - issuperset(iterable) returns True if this set contains given iterable
            - equivalent: operator '>='
        - 'in (not)' checks whether set contains elem (or not)
    - copy() returns shallow copy

- SEE ALSO
    - /exercism/python/cater-waiter

EXAMPLE
(1)
words = "joe doe".split()
# s = {words}               # TypeError
s = set(words)
print(s)                    # {'joe', 'doe'}

(2.1)
s = set("joe doe")
s.discard(' ')
print(s)                    # {'d', 'o', 'e', 'j'}

(2.2)
a = {1, 2, 3, 4, 5}
b = (1, 2)
c = [3]
d = {4: "jd"}
diff1 = a.difference(b, c, d)
print(diff1)                # {5}
diff2 = a - set(b) - set(c) - set(d)
print(diff1 == diff2)       # True

inter1 = a.intersection(b)
print(inter1)               # {1, 2}
inter2 = a & set(b)
print(inter1 == inter2)     # True

union1 = a.union(b)
print(union1)               # {1, 2, 3, 4, 5}
union2 = a | set(b)
print(union1 == union2)     # True
