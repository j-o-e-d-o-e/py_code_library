tuple

data structure

immutable, indexed iterable
- creation
    (1) literal with parenthesis
        - extra comma allows for tuple with single val
        - allows to add multiple iterables, including dicts with keys and vals
        - generally, parenthesis not required, but more readable
    (2) constructor tuple(iterable)
        - single arg: iterable (optional)
            - may be: dict(only keys), list, set, string, another tuple
            - if not given, empty tuple
- operations
    (3) may be concatenated
        - unpacks each tuple creating a new, combined tuple
    (4) may be sliced
    (5) may be assigned to
    (6) may be multiplied to add itself n times
    (7) may be checked whether it contains elem via 'in'-operator
- methods
    - index(val, start, end) searches for specified val
        - 2nd/3rd arg: where to search (optional)
        - returns index of 1st occurence
            - if val not present, raises ValueError
    - count(val, start, end) returns number of occurences of specified val
        - 2nd/3rd arg: where to count (optional)
    - copy() returns shallow copy
        - alternatively, use slicing

- SEE ALSO
    - docs.python.org/3/library/stdtypes.html#common-sequence-operations
    - /exercism/python/tisbury-treasure-hunt

EXAMPLE
(1)
t = (1, 2, 3)           # (1, 2, 3)
t[0]                    # 1
(2)
t = tuple([1, 2, 3])    # (1, 2, 3)
for i in t:
    print(i, end=" ")   # 1 2 3
(3)
t = ('joe', 'doe')
print(t + ("bow",))     # ('joe', 'doe', 'bow')
(4)
print(t[::-1])          # ('doe', 'joe')
print(t[1:])            # ('doe',)
(5)
(a, b) = t
(x, y) = (t[1], t[0])
print(b, a)             # doe joe
print((b, a) == (x, y)) # True
(6)
t = (1,) * 3            # (1, 1, 1)
(7)
"joe" in ("joe", "doe") # True
