list comprehension

shorthand for for-loop

- [expression for elem in iterable if-statement]
    - if-statement optional (1)
    - may be used with multiple (2) and nested (3) iterables
    - returns new list
- useful to map (filtered) elems of given 
    (1) iterable to single val
        - equivalent to: list(filter(map()))
    (2) nested iterable to single val
    (3) iterable to multiple vals
    (4) multiple iterables to single val (permutation)
    (5) multiple iterables to multiple vals (permutation)

- SEE ALSO
    - /exercism/python/making-the-grade

EXAMPLE
(1)
res = [x ** 2 for x in range(1, 12) if x % 2 == 0]
print(res)  # [4, 16, 36, 64, 100]
res1 = list(filter(lambda x: x % 2 == 0, map(lambda x: x ** 2, range(1, 12))))
print(res == res1)  # True

(2)
matrix = [[0, 2, 4], [6, 8, 10, 12]]
res = [n for row in matrix for n in row]
print(res)  # [0, 2, 4, 6, 8, 10, 12]

(3)
res = [j for i in [1, 2] for j in (i, i)]
print(res)  # [2, 2, 1, 1]

(4)
colours = ["red", "green", "blue"]
things = ["pen", "tree"]
res = [f"{x} {y}" for x in colours for y in things]
print(res)  # ['red pen', 'red tree', 'green pen', 'green tree', 'blue pen', 'blue tree']

(5)
res = [z for x in colours for y in things for z in (x, y)]
print(res)  # ['red', 'pen', 'red', 'tree', 'green', 'pen', 'green', 'tree', 'blue', 'pen', 'blue', 'tree']
