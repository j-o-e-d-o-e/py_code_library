lib->numpy

numerical computation

provides multidimensional array objs and methods, e.g. for open-cv

(1) constructor array()
    - single arg: (nested) iterable
    - returns ndarray obj
(2) properties
    - size: amount of elems in array
    - ndim: dimension of invoked array
    - shape: number of columns and rows
(3) operations, e.g. for 2-dim-array
    - array[x, y] returns element
    - array[start:end:step, start:end:step] returns slice from array, e.g.
        - arr[0:, 2] returns 3rd elem from each list
        - arr[:1, 0:2] return first three elems from 1st list
    - arr1 + arr2 sums up arrays elementwise and returns new array
        - similarly: subtraction, multiplication and division
(4) methods on ndarray
    - min()/max() returns min resp. max
    - sum() returns sum of elems over given axis
        - axis 0: columns, axis 1: rows
        - e.g. arr.sum(axis=0) returns sum of each column
    - reshape(x, y) reshapes array with x rows and y columns
    - ravel() flattens array
(5) methods on np
    - hstack((a, b)) stacks arrays a and b horizontally
    - vstack((a, b)) stacks vertically

- SEE ALSO
    - numpy.org

EXAMPLE
import numpy as np
(1)
ls1 = (1, 2, 3)
ls2 = [4, 5, 6]
arr = np.array([ls1, ls2])
print(arr)              # [[1 2 3] [4 5 6]]
(2)
print(arr.ndim)         # 2
print(arr.size)         # 6
print(arr.shape)        # (2, 3)
(3)
print(arr[0, 2])        # 3
print(arr[:1, 0:2])     # [[1,2]]
arr = arr + arr         # [[ 2  4  6] [ 8 10 12]]
(4)
print(arr.max())        # 12
print(arr.sum(axis=0))  # [10 14 18]
print(arr.ravel())      # [ 2  4  6  8 10 12]
c = arr.reshape(3, 2)   # [[ 2  4] [ 6  8] [10 12]]
(5)
print(np.hstack((arr, arr)))
# [[ 2  4  6  2  4  6]
# [ 8 10 12  8 10 12]]
