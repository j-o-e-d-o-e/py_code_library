lib->pytest

testing

- test-class
    -  inherits from unittest.Testcase
    - each test is annotated, e.g. @pytest.mark.task(taskno=1)
- methods 
    - assertEqual(act, exp, msg) fails if the two objs are unequal

- SEE ALSO
    - docs.pytest.org

EXAMPLE
# main.py
EXPECTED_BAKE_TIME = 40

def bake_time_remaining(min):
    return EXPECTED_BAKE_TIME - min

# test.py
import unittest
import pytest
from main import *

class LasagnaTest(unittest.TestCase):
    @pytest.mark.task(taskno=1)
    def test_EXPECTED_BAKE_TIME(self):
        failure_msg = 'Expected a constant of EXPECTED_BAKE_TIME with a value of 40.'
        self.assertEqual(EXPECTED_BAKE_TIME, 40, msg=failure_msg)

    @pytest.mark.task(taskno=2)
    def test_bake_time_remaining(self):
        input_data = [1, 2, 5, 10, 15, 23, 33, 39]
        result_data = [40 - item for item in input_data]

        for variant, (time, result) in enumerate(zip(input_data, result_data), start=1):
            with self.subTest(f'variation #{variant}', time=time, result=result):
                failure_msg = f'Expected: {result} but the bake time remaining was calculated incorrectly.'
                self.assertEqual(bake_time_remaining(time), result, msg=failure_msg)
