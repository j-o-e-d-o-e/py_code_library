sorted()

built-in function

sorted(iterable[, key][, reverse])

- Returns a new sorted list. In contrary, list.sort() mutates the list in-place and doesn't return anything
- sorted() accepts any iterable. list.sort() is only defined for lists
- 'key'-parameter is called on each list element prior to comparison
- 'reverse'-parameter with boolean value is used for reversed order
- Useful for sorting dicts

EXAMPLES
nums = [0,3,6,9]
sorted (nums, reverse=True)
#prompts: [9, 6, 3, 0]

nums = [-9,-1,5,-4]
sorted(nums)
[-9, -4, -1, 5]
sorted(nums, key=abs)
[-1, -4, 5, -9]

student_tuples = [('john', 'A', 15),('jane', 'B', 12),('dave', 'B', 10)]
sorted(student_tuples, key=lambda student: student[2])
#prompts: [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]

#alternatively to sort by grade[1] and then by age[2]:
from operator import itemgetter
sorted(student_tuples, key=itemgetter(1,2))
#prompts: [('john', 'A', 15), ('dave', 'B', 10), ('jane', 'B', 12)]

sorted(student_tuples, key=itemgetter(1,2), reverse= True)
#prompts: [('jane', 'B', 12), ('dave', 'B', 10), ('john', 'A', 15)]

dict = {'1': ['2', '7'], '7': ['1'], '4': ['1','6']}
sorted(dict.items(), key=lambda x:x[0])
#prompts: [('1', ['2', '7']), ('4', ['1', '6']), ('7', ['1'])]