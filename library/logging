logging

debugging

Instead of using multiple 'print'-expressions for debugging Easier to use.

- logging.debug() prints log information
- logging.disable(logging.CRITICAL) disables log messages
- logging levels: DEBUG, INFO, WARNING, ERROR and CRITICAL
- logging.debug(), logging.info(), logging.warning(), logging.error() or logging.critical() shows the according message
- If logging level set to CRITICAL, only CRITICAL messages are shown. If set to DEBUG, all messages are shown

EXAMPLE
import logging

logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')

def factorial(n):
    logging.debug('Start of factorial(%s)' % (n))
    total = 1
    for i in range(n + 1):#should be 'for i in range(1, n + 1):'
        total *= i
        logging.debug('i is ' + str(i) + ', total is ' + str(total))
    logging.debug('End of factorial(%s)' % (n))
    return total

print(factorial(5))
logging.debug('End of program')

#prompts possible error, eg that factorial-function starts at '0' instead of '1':
2016-08-10 23:43:46,076 - DEBUG - Start of factorial(5)
2016-08-10 23:43:46,094 - DEBUG - i is 0, total is 0
...
2016-08-10 23:43:46,144 - DEBUG - End of factorial(5)
0
2016-08-10 23:43:46,160 - DEBUG - End of program
